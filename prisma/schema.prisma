// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), pg_trgm]
}

// Connection pooling configuration
// For production, consider using connection pooling with PgBouncer or similar
// PostgreSQL optimized schema with full-text search and UUID extensions

enum TimerStatus {
  RUNNING
  PAUSED
  COMPLETED
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

enum ChallengeType {
  TIME
  TASKS
  STREAK
  FOCUS
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  name          String?         @db.VarChar(255)
  clerkId       String?         @unique @db.VarChar(255) // Clerk authentication ID
  hashedPassword String?        @db.VarChar(255) // Renamed from passwordHash for consistency
  totalXP       Int             @default(0) // Renamed from xp for clarity
  level         Int             @default(1)
  preferences   Json?           // User preferences as JSON
  isActive      Boolean         @default(true)
  lastActiveAt  DateTime?       @db.Timestamptz // Track user activity with timezone
  // relationships
  projects      Project[]
  tasks         Task[]
  timers        Timer[]
  timeEntries   TimeEntry[]
  xpHistory     XPHistory[]
  challenges    UserChallenge[]
  achievements  UserAchievement[]
  // audit
  createdAt     DateTime        @default(now()) @db.Timestamptz
  updatedAt     DateTime        @updatedAt @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([email], type: Hash)
  @@index([clerkId], type: Hash)
  @@index([isActive])
  @@index([lastActiveAt])
  @@index([totalXP])
  @@index([level])
  @@index([email, isActive]) // Composite index for active user lookups
  @@index([totalXP, level]) // Composite index for leaderboards

  @@map("users")
}

model Project {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @db.VarChar(255)
  description String?     @db.Text // Project description
  client      String?     @db.VarChar(255) // optional customer/analytic account
  color       String?     @db.VarChar(7) // Project color for UI (hex color)
  archived    Boolean     @default(false) // Soft delete
  ownerId     String      @db.Uuid
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timers      Timer[]
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now()) @db.Timestamptz
  updatedAt   DateTime    @updatedAt @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([ownerId])
  @@index([name]) // Index for text search
  @@index([archived])
  @@index([client])
  @@index([createdAt])
  @@index([ownerId, archived]) // Composite index for active projects per user
  @@unique([ownerId, name]) // Unique project name per user

  @@map("projects")
}

model Task {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String      @db.Uuid
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String      @db.VarChar(500)
  description String?     @db.Text
  completed   Boolean     @default(false) // Task completion status
  priority    Priority    @default(MEDIUM) // LOW, MEDIUM, HIGH, URGENT
  dueDate     DateTime?   @db.Timestamptz // Task due date
  estimatedMinutes Int?    // Estimated time in minutes
  actualMinutes    Int?    // Actual time spent in minutes
  assigneeId  String?     @db.Uuid
  assignee    User?       @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  timers      Timer[]
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now()) @db.Timestamptz
  updatedAt   DateTime    @updatedAt @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([projectId])
  @@index([assigneeId])
  @@index([completed])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@index([title]) // Index for text search
  @@index([projectId, completed]) // Composite index for project task status
  @@index([assigneeId, completed]) // Composite index for user task status
  @@index([dueDate, completed]) // Composite index for due task queries

  @@map("tasks")
}

model Timer {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      String?      @db.Uuid
  project        Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  taskId         String?      @db.Uuid
  task           Task?        @relation(fields: [taskId], references: [id], onDelete: SetNull)
  description    String?      @db.Text // Renamed from note for consistency
  billable       Boolean      @default(false)
  status         TimerStatus  @default(RUNNING)
  startTime      DateTime     @db.Timestamptz // Renamed from startedAt for consistency
  endTime        DateTime?    @db.Timestamptz // End time when timer is stopped
  pausedAt       DateTime?    @db.Timestamptz // last pause time
  totalPausedTime Int         @default(0) // Renamed from totalPausedMs
  elapsedTime    Int          @default(0) // Renamed from elapsedMs
  xpHistory      XPHistory[]
  createdAt      DateTime     @default(now()) @db.Timestamptz
  updatedAt      DateTime     @updatedAt @db.Timestamptz

  // Comprehensive indexes for performance - PostgreSQL optimized
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([status])
  @@index([userId, status])
  @@index([userId, projectId])
  @@index([userId, taskId])
  @@index([startTime])
  @@index([endTime])
  @@index([billable])
  @@index([createdAt])
  @@index([userId, startTime]) // Composite index for user timer history
  @@index([status, startTime]) // Composite index for active timer queries

  @@map("timers")
}

model TimeEntry {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?   @db.Uuid
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  taskId      String?   @db.Uuid
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  date        DateTime  @db.Date // effort date (timer completedAt or startedAt date)
  description String?   @db.Text
  billable    Boolean   @default(false)
  minutes     Int       // duration in minutes (practical for Excel and reporting)
  sourceTimer String?   @db.Uuid // which timer it came from (audit)
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([date])
  @@index([billable])
  @@index([userId, date])
  @@index([userId, projectId])
  @@index([userId, taskId])
  @@index([sourceTimer])
  @@index([createdAt])
  @@index([userId, date, billable]) // Composite index for billing reports
  @@index([projectId, date]) // Composite index for project time reports

  @@map("time_entries")
}

enum XPAction {
  TIMER_STARTED
  TIMER_COMPLETED
  TIMER_CANCELLED
  STREAK_BONUS
  LEVEL_UP
  DAILY_GOAL
}

model XPHistory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      XPAction
  xpEarned    Int       // amount of XP earned (can be negative for penalties)
  description String?   @db.Text // human readable description
  timerId     String?   @db.Uuid // related timer if applicable
  timer       Timer?    @relation(fields: [timerId], references: [id], onDelete: SetNull)
  metadata    Json?     @db.JsonB // JSON for additional data (level, streak, etc.)
  createdAt   DateTime  @default(now()) @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([userId])
  @@index([timerId])
  @@index([action])
  @@index([userId, createdAt])
  @@index([userId, action])
  @@index([createdAt])
  @@index([metadata], type: Gin) // GIN index for JSONB queries

  @@map("xp_history")
}

model UserChallenge {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String        @db.Uuid
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String        @db.VarChar(255) // daily_time, daily_tasks, etc.
  title       String        @db.VarChar(255)
  description String        @db.Text
  target      Int
  current     Int           @default(0)
  xpReward    Int
  type        ChallengeType // time, tasks, streak, focus
  completed   Boolean       @default(false)
  date        DateTime      @db.Date // challenge date
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([userId])
  @@index([challengeId])
  @@index([type])
  @@index([completed])
  @@index([date])
  @@index([userId, date])
  @@index([userId, completed])
  @@index([userId, type])
  @@index([date, completed]) // Composite index for daily challenge queries
  @@unique([userId, challengeId, date])

  @@map("user_challenges")
}

model UserAchievement {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String            @db.Uuid
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String            @db.VarChar(255) // first_hour, ten_hours, etc.
  title         String            @db.VarChar(255)
  description   String            @db.Text
  xpReward      Int
  category      String            @db.VarChar(100) // time, tasks, streak, special
  rarity        AchievementRarity // common, rare, epic, legendary
  unlockedAt    DateTime          @default(now()) @db.Timestamptz

  // Indexes for performance - PostgreSQL optimized
  @@index([userId])
  @@index([achievementId])
  @@index([category])
  @@index([rarity])
  @@index([unlockedAt])
  @@index([userId, category])
  @@index([userId, rarity])
  @@index([category, rarity]) // Composite index for achievement browsing
  @@unique([userId, achievementId])

  @@map("user_achievements")
}
